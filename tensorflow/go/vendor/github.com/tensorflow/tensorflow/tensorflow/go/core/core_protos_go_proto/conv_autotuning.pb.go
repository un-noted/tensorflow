// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/conv_autotuning.proto

package core_protos_go_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	stream_executor "github.com/tensorflow/tensorflow/tensorflow/go/stream_executor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A convolution. Currently it's only used for logging. In the future, we may
// want to use it in the API as well.
type ConvolutionProto struct {
	Kind     stream_executor.ConvolutionKind             `protobuf:"varint,1,opt,name=kind,proto3,enum=stream_executor.dnn.ConvolutionKind" json:"kind,omitempty"`
	Input    *stream_executor.TensorDescriptorProto      `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Filter   *stream_executor.TensorDescriptorProto      `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Output   *stream_executor.TensorDescriptorProto      `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	ConvDesc *stream_executor.ConvolutionDescriptorProto `protobuf:"bytes,5,opt,name=conv_desc,json=convDesc,proto3" json:"conv_desc,omitempty"`
	// result = conv_scale * conv(...) + side_value_scale * side_value.
	// side_value is an arbitrary buffer if activation is not none. Otherwise, it
	// has to be the result buffer (using its old values).
	ConvScale            float64                        `protobuf:"fixed64,6,opt,name=conv_scale,json=convScale,proto3" json:"conv_scale,omitempty"`
	SideValueScale       float64                        `protobuf:"fixed64,7,opt,name=side_value_scale,json=sideValueScale,proto3" json:"side_value_scale,omitempty"`
	Activation           stream_executor.ActivationMode `protobuf:"varint,8,opt,name=activation,proto3,enum=stream_executor.dnn.ActivationMode" json:"activation,omitempty"`
	InputAddress         int64                          `protobuf:"varint,9,opt,name=input_address,json=inputAddress,proto3" json:"input_address,omitempty"`
	FilterAddress        int64                          `protobuf:"varint,10,opt,name=filter_address,json=filterAddress,proto3" json:"filter_address,omitempty"`
	OutputAddress        int64                          `protobuf:"varint,11,opt,name=output_address,json=outputAddress,proto3" json:"output_address,omitempty"`
	BiasAddress          int64                          `protobuf:"varint,12,opt,name=bias_address,json=biasAddress,proto3" json:"bias_address,omitempty"`
	SideInputAddress     int64                          `protobuf:"varint,13,opt,name=side_input_address,json=sideInputAddress,proto3" json:"side_input_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ConvolutionProto) Reset()         { *m = ConvolutionProto{} }
func (m *ConvolutionProto) String() string { return proto.CompactTextString(m) }
func (*ConvolutionProto) ProtoMessage()    {}
func (*ConvolutionProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d1b55de4e1b5595, []int{0}
}

func (m *ConvolutionProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvolutionProto.Unmarshal(m, b)
}
func (m *ConvolutionProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvolutionProto.Marshal(b, m, deterministic)
}
func (m *ConvolutionProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvolutionProto.Merge(m, src)
}
func (m *ConvolutionProto) XXX_Size() int {
	return xxx_messageInfo_ConvolutionProto.Size(m)
}
func (m *ConvolutionProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvolutionProto.DiscardUnknown(m)
}

var xxx_messageInfo_ConvolutionProto proto.InternalMessageInfo

func (m *ConvolutionProto) GetKind() stream_executor.ConvolutionKind {
	if m != nil {
		return m.Kind
	}
	return stream_executor.ConvolutionKind_INVALID
}

func (m *ConvolutionProto) GetInput() *stream_executor.TensorDescriptorProto {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ConvolutionProto) GetFilter() *stream_executor.TensorDescriptorProto {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ConvolutionProto) GetOutput() *stream_executor.TensorDescriptorProto {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ConvolutionProto) GetConvDesc() *stream_executor.ConvolutionDescriptorProto {
	if m != nil {
		return m.ConvDesc
	}
	return nil
}

func (m *ConvolutionProto) GetConvScale() float64 {
	if m != nil {
		return m.ConvScale
	}
	return 0
}

func (m *ConvolutionProto) GetSideValueScale() float64 {
	if m != nil {
		return m.SideValueScale
	}
	return 0
}

func (m *ConvolutionProto) GetActivation() stream_executor.ActivationMode {
	if m != nil {
		return m.Activation
	}
	return stream_executor.ActivationMode_kNone
}

func (m *ConvolutionProto) GetInputAddress() int64 {
	if m != nil {
		return m.InputAddress
	}
	return 0
}

func (m *ConvolutionProto) GetFilterAddress() int64 {
	if m != nil {
		return m.FilterAddress
	}
	return 0
}

func (m *ConvolutionProto) GetOutputAddress() int64 {
	if m != nil {
		return m.OutputAddress
	}
	return 0
}

func (m *ConvolutionProto) GetBiasAddress() int64 {
	if m != nil {
		return m.BiasAddress
	}
	return 0
}

func (m *ConvolutionProto) GetSideInputAddress() int64 {
	if m != nil {
		return m.SideInputAddress
	}
	return 0
}

func init() {
	proto.RegisterType((*ConvolutionProto)(nil), "tensorflow.ConvolutionProto")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/conv_autotuning.proto", fileDescriptor_5d1b55de4e1b5595)
}

var fileDescriptor_5d1b55de4e1b5595 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdd, 0x6b, 0xd4, 0x40,
	0x14, 0xc5, 0x89, 0xed, 0xae, 0xed, 0xdd, 0x0f, 0xca, 0x3c, 0x05, 0x41, 0x58, 0x6d, 0x85, 0x20,
	0x92, 0x40, 0x7d, 0xf1, 0xd1, 0xb6, 0x3e, 0xf8, 0x09, 0x12, 0xc5, 0x07, 0x5f, 0xc2, 0xec, 0xcc,
	0x6c, 0x1c, 0x4c, 0xe7, 0x2e, 0xf3, 0x11, 0xfd, 0xcb, 0xfc, 0xfb, 0x64, 0xee, 0xb4, 0x31, 0x96,
	0x85, 0xb2, 0x2f, 0xc9, 0x70, 0xf2, 0x3b, 0x67, 0x2e, 0x27, 0x33, 0x50, 0x7a, 0x65, 0x1c, 0xda,
	0x4d, 0x87, 0xbf, 0x2a, 0x81, 0x56, 0x55, 0x5b, 0x8b, 0x1e, 0xd7, 0x61, 0x53, 0x09, 0x34, 0x7d,
	0xc3, 0x83, 0x47, 0x1f, 0x8c, 0x36, 0x6d, 0x49, 0x1f, 0x18, 0xfc, 0xe3, 0x1f, 0x9d, 0x8d, 0xbc,
	0xce, 0x5b, 0xc5, 0xaf, 0x1b, 0xf5, 0x5b, 0x89, 0xe0, 0xd1, 0x56, 0xd2, 0x98, 0xe4, 0x78, 0xfa,
	0x67, 0x02, 0x27, 0x57, 0x68, 0x7a, 0xec, 0x82, 0xd7, 0x68, 0x3e, 0x53, 0xcc, 0x2b, 0x38, 0xfc,
	0xa9, 0x8d, 0xcc, 0xb3, 0x55, 0x56, 0x2c, 0xcf, 0xcf, 0xca, 0x3b, 0xf6, 0x32, 0xda, 0x47, 0xa6,
	0x0f, 0xda, 0xc8, 0x9a, 0x1c, 0xec, 0x35, 0x4c, 0xb4, 0xd9, 0x06, 0x9f, 0x3f, 0x58, 0x65, 0xc5,
	0xec, 0xfc, 0xf9, 0x4e, 0xeb, 0x57, 0x1a, 0xec, 0x8d, 0x72, 0xc2, 0xea, 0xad, 0x47, 0x4b, 0x9b,
	0xd6, 0xc9, 0xc8, 0x2e, 0x61, 0xba, 0xd1, 0x9d, 0x57, 0x36, 0x3f, 0xd8, 0x3b, 0xe2, 0xc6, 0x19,
	0x33, 0x30, 0xf8, 0x38, 0xc6, 0xe1, 0xfe, 0x19, 0xc9, 0xc9, 0x3e, 0xc2, 0x31, 0x75, 0x2c, 0x95,
	0x13, 0xf9, 0x84, 0x62, 0xaa, 0xfb, 0x8a, 0xb8, 0x9b, 0x75, 0x14, 0x13, 0xa2, 0xc8, 0x1e, 0x03,
	0x50, 0x9a, 0x13, 0xbc, 0x53, 0xf9, 0x74, 0x95, 0x15, 0x59, 0x4d, 0xf9, 0x5f, 0xa2, 0xc0, 0x0a,
	0x38, 0x71, 0x5a, 0xaa, 0xa6, 0xe7, 0x5d, 0x50, 0x37, 0xd0, 0x43, 0x82, 0x96, 0x51, 0xff, 0x16,
	0xe5, 0x44, 0x5e, 0x01, 0x70, 0xe1, 0x75, 0xcf, 0xe3, 0x7e, 0xf9, 0x11, 0xfd, 0xa0, 0xd3, 0x9d,
	0x73, 0x5d, 0x0c, 0xd8, 0x27, 0x94, 0xaa, 0x1e, 0xd9, 0xd8, 0x29, 0x2c, 0xa8, 0xec, 0x86, 0x4b,
	0x69, 0x95, 0x73, 0xf9, 0xf1, 0x2a, 0x2b, 0x0e, 0xea, 0x39, 0x89, 0x17, 0x49, 0x63, 0xcf, 0x60,
	0x99, 0xea, 0x1c, 0x28, 0x20, 0x6a, 0x91, 0xd4, 0x11, 0x96, 0x1a, 0x1b, 0xb0, 0x59, 0xc2, 0x92,
	0x7a, 0x8b, 0x3d, 0x81, 0xf9, 0x5a, 0x73, 0x37, 0x40, 0x73, 0x82, 0x66, 0x51, 0xbb, 0x45, 0x5e,
	0x00, 0xa3, 0x12, 0xfe, 0x1f, 0x6d, 0x41, 0x20, 0xd5, 0xf3, 0x6e, 0x34, 0xde, 0xe5, 0xfb, 0xef,
	0x6f, 0x5b, 0xed, 0x7f, 0x84, 0x75, 0x29, 0xf0, 0xba, 0x1a, 0x9d, 0xf5, 0xdd, 0xcb, 0x16, 0xd3,
	0x05, 0x8a, 0x8f, 0x86, 0x8e, 0xbe, 0x6b, 0x5a, 0x4c, 0xab, 0xf5, 0x94, 0x5e, 0x2f, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x24, 0xb2, 0xe6, 0x4a, 0x6f, 0x03, 0x00, 0x00,
}
